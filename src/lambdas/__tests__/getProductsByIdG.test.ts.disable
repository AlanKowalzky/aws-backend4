import { APIGatewayProxyEvent } from 'aws-lambda';
import { handler } from '../getProductsById';
import { productsList } from '../../mocks/products';

describe('getProductsById Lambda', () => {
  const mockEventBase = {
    body: null,
    headers: {},
    multiValueHeaders: {},
    httpMethod: 'GET',
    isBase64Encoded: false,
    path: '/products',
    queryStringParameters: null,
    multiValueQueryStringParameters: null,
    stageVariables: null,
    requestContext: {
      accountId: '12345',
      apiId: '123',
      authorizer: undefined,
      protocol: 'HTTP',
      httpMethod: 'GET',
      identity: {
        accessKey: null,
        accountId: '123',
        apiKey: null,
        apiKeyId: null,
        caller: null,
        clientCert: null,
        cognitoAuthenticationProvider: null,
        cognitoAuthenticationType: null,
        cognitoIdentityId: null,
        cognitoIdentityPoolId: null,
        principalOrgId: null,
        sourceIp: '127.0.0.1',
        user: null,
        userAgent: null,
        userArn: null,
      },
      path: '/product',
      stage: 'test',
      requestId: '123',
      requestTimeEpoch: 123,
      resourceId: '123',
      resourcePath: '/product',
    },
    resource: '/product',
  };
  // Test 1: Successfully retrieve a product
  it('should return a product when valid ID is provided', async () => {
    // Assuming there's at least one product in the productsList
    const testProduct = productsList[0];

    const event: APIGatewayProxyEvent = {
      ...mockEventBase,
      pathParameters: {
        productId: testProduct.id,
      },
    } as any as APIGatewayProxyEvent;

    const response = await handler(event);

    expect(response.statusCode).toBe(200);
    expect(JSON.parse(response.body)).toEqual(testProduct);
  });

  // Test 2: Missing product ID
  it('should return 400 when product ID is not provided', async () => {
    const event: APIGatewayProxyEvent = {
      ...mockEventBase,
      pathParameters: null,
    } as any as APIGatewayProxyEvent;

    const response = await handler(event);

    expect(response.statusCode).toBe(400);
    expect(JSON.parse(response.body)).toEqual({
      message: 'Product ID is required',
    });
  });

  // Test 3: Product not found
  it('should return 404 when product is not found', async () => {
    const event: APIGatewayProxyEvent = {
      ...mockEventBase,
      pathParameters: {
        productId: 'non-existent-id',
      },
    } as any as APIGatewayProxyEvent;

    const response = await handler(event);

    expect(response.statusCode).toBe(404);
    expect(JSON.parse(response.body)).toEqual({
      message: 'Product not found',
    });
  });

  // Test 4: Verify CORS headers
  it('should include CORS headers in the response', async () => {
    const event: APIGatewayProxyEvent = {
      ...mockEventBase,
      pathParameters: {
        productId: productsList[0].id,
      },
    } as any as APIGatewayProxyEvent;

    const response = await handler(event);

    expect(response.headers).toEqual({
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Credentials': true,
    });
  });

  // Test 5: Error handling
  it('should return 500 when an error occurs', async () => {
    // Mock productsList.find to throw an error
    jest.spyOn(productsList, 'find').mockImplementationOnce(() => {
      throw new Error('Test error');
    });
    const event: APIGatewayProxyEvent = {
      ...mockEventBase,
      pathParameters: {
        productId: 'some-id',
      },
    } as any as APIGatewayProxyEvent;

    const response = await handler(event);

    expect(response.statusCode).toBe(500);
    expect(JSON.parse(response.body)).toEqual({
      message: 'Internal server error',
    });
    jest.restoreAllMocks();
  });
});
