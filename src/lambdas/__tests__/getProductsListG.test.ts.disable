import { APIGatewayProxyEvent, Context, APIGatewayEventRequestContext } from 'aws-lambda';
import { handler } from './../getProductsList';
import { productsList } from '../../mocks/products';

// Określenie interfejsu dla requestContext
interface CustomRequestContext extends APIGatewayEventRequestContext {
}

describe('getProductsList lambda', () => {
  let mockEvent: APIGatewayProxyEvent;
  let consoleSpy: jest.SpyInstance;

  beforeEach(() => {
    // Reset the mock event before each test
    mockEvent = {
      body: null,
      headers: {},
      multiValueHeaders: {},
      httpMethod: 'GET',
      isBase64Encoded: false,
      path: '/products',
      pathParameters: null,
      queryStringParameters: null,
      multiValueQueryStringParameters: null,
      stageVariables: null,
      requestContext: {} as CustomRequestContext, // Użycie zdefiniowanego interfejsu
      resource: '',
    } as APIGatewayProxyEvent;

    consoleSpy = jest.spyOn(console, 'log').mockImplementation();
  });

  afterEach(() => {
    consoleSpy.mockRestore();
    jest.restoreAllMocks();
  });

  it('should return product list with 200 status code', async () => {
    const response = await handler(mockEvent);

    expect(response.statusCode).toBe(200);
    expect(JSON.parse(response.body)).toEqual(productsList);
    expect(response.headers).toEqual({
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Credentials': true,
    });
  });

  it('should include CORS headers in the response', async () => {
    const response = await handler(mockEvent);

    expect(response.headers).toMatchObject({
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Credentials': true,
    });
  });

  it('should log the event when invoked', async () => {
    await handler(mockEvent);

    expect(consoleSpy).toHaveBeenCalledWith(
      'getProductsList lambda invoked with event:',
      JSON.stringify(mockEvent, null, 2)
    );
  });

  it('should handle errors and return 500 status code', async () => {
    // Mock JSON.stringify to throw an error. This is the only thing, that can throw error in this function.
    jest.spyOn(JSON, 'stringify').mockImplementationOnce(() => {
      throw new Error('Test error');
    });

    try {
      await handler(mockEvent);
      fail('Expected handler to throw an error'); // If no error is thrown, fail the test
    } catch (error: Error) { // Poprawiony typ w catch
      // If error is thrown, expect an error
      expect(error.message).toBe('Test error');
    }
  });
});
